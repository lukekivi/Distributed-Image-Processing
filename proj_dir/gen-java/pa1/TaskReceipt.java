/**
 * Autogenerated by Thrift Compiler (0.13.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package pa1;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
/**
 * Receipt for a TaskRequest.
 * - taskPath: the path of the assigned image
 * -   status: the status of the task
 * -   policy: scheduling policy used by the nodes
 * -      msg: a message from the server
 */
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.13.0)", date = "2022-02-22")
public class TaskReceipt implements org.apache.thrift.TBase<TaskReceipt, TaskReceipt._Fields>, java.io.Serializable, Cloneable, Comparable<TaskReceipt> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TaskReceipt");

  private static final org.apache.thrift.protocol.TField TASK_PATH_FIELD_DESC = new org.apache.thrift.protocol.TField("taskPath", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("status", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField POLICY_FIELD_DESC = new org.apache.thrift.protocol.TField("policy", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField MSG_FIELD_DESC = new org.apache.thrift.protocol.TField("msg", org.apache.thrift.protocol.TType.STRING, (short)4);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new TaskReceiptStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new TaskReceiptTupleSchemeFactory();

  public @org.apache.thrift.annotation.Nullable java.lang.String taskPath; // required
  /**
   * 
   * @see TaskStatus
   */
  public @org.apache.thrift.annotation.Nullable TaskStatus status; // required
  /**
   * 
   * @see SchedulingPolicy
   */
  public @org.apache.thrift.annotation.Nullable SchedulingPolicy policy; // required
  public @org.apache.thrift.annotation.Nullable java.lang.String msg; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    TASK_PATH((short)1, "taskPath"),
    /**
     * 
     * @see TaskStatus
     */
    STATUS((short)2, "status"),
    /**
     * 
     * @see SchedulingPolicy
     */
    POLICY((short)3, "policy"),
    MSG((short)4, "msg");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // TASK_PATH
          return TASK_PATH;
        case 2: // STATUS
          return STATUS;
        case 3: // POLICY
          return POLICY;
        case 4: // MSG
          return MSG;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.TASK_PATH, new org.apache.thrift.meta_data.FieldMetaData("taskPath", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.STATUS, new org.apache.thrift.meta_data.FieldMetaData("status", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, TaskStatus.class)));
    tmpMap.put(_Fields.POLICY, new org.apache.thrift.meta_data.FieldMetaData("policy", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, SchedulingPolicy.class)));
    tmpMap.put(_Fields.MSG, new org.apache.thrift.meta_data.FieldMetaData("msg", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TaskReceipt.class, metaDataMap);
  }

  public TaskReceipt() {
  }

  public TaskReceipt(
    java.lang.String taskPath,
    TaskStatus status,
    SchedulingPolicy policy,
    java.lang.String msg)
  {
    this();
    this.taskPath = taskPath;
    this.status = status;
    this.policy = policy;
    this.msg = msg;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TaskReceipt(TaskReceipt other) {
    if (other.isSetTaskPath()) {
      this.taskPath = other.taskPath;
    }
    if (other.isSetStatus()) {
      this.status = other.status;
    }
    if (other.isSetPolicy()) {
      this.policy = other.policy;
    }
    if (other.isSetMsg()) {
      this.msg = other.msg;
    }
  }

  public TaskReceipt deepCopy() {
    return new TaskReceipt(this);
  }

  @Override
  public void clear() {
    this.taskPath = null;
    this.status = null;
    this.policy = null;
    this.msg = null;
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getTaskPath() {
    return this.taskPath;
  }

  public TaskReceipt setTaskPath(@org.apache.thrift.annotation.Nullable java.lang.String taskPath) {
    this.taskPath = taskPath;
    return this;
  }

  public void unsetTaskPath() {
    this.taskPath = null;
  }

  /** Returns true if field taskPath is set (has been assigned a value) and false otherwise */
  public boolean isSetTaskPath() {
    return this.taskPath != null;
  }

  public void setTaskPathIsSet(boolean value) {
    if (!value) {
      this.taskPath = null;
    }
  }

  /**
   * 
   * @see TaskStatus
   */
  @org.apache.thrift.annotation.Nullable
  public TaskStatus getStatus() {
    return this.status;
  }

  /**
   * 
   * @see TaskStatus
   */
  public TaskReceipt setStatus(@org.apache.thrift.annotation.Nullable TaskStatus status) {
    this.status = status;
    return this;
  }

  public void unsetStatus() {
    this.status = null;
  }

  /** Returns true if field status is set (has been assigned a value) and false otherwise */
  public boolean isSetStatus() {
    return this.status != null;
  }

  public void setStatusIsSet(boolean value) {
    if (!value) {
      this.status = null;
    }
  }

  /**
   * 
   * @see SchedulingPolicy
   */
  @org.apache.thrift.annotation.Nullable
  public SchedulingPolicy getPolicy() {
    return this.policy;
  }

  /**
   * 
   * @see SchedulingPolicy
   */
  public TaskReceipt setPolicy(@org.apache.thrift.annotation.Nullable SchedulingPolicy policy) {
    this.policy = policy;
    return this;
  }

  public void unsetPolicy() {
    this.policy = null;
  }

  /** Returns true if field policy is set (has been assigned a value) and false otherwise */
  public boolean isSetPolicy() {
    return this.policy != null;
  }

  public void setPolicyIsSet(boolean value) {
    if (!value) {
      this.policy = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getMsg() {
    return this.msg;
  }

  public TaskReceipt setMsg(@org.apache.thrift.annotation.Nullable java.lang.String msg) {
    this.msg = msg;
    return this;
  }

  public void unsetMsg() {
    this.msg = null;
  }

  /** Returns true if field msg is set (has been assigned a value) and false otherwise */
  public boolean isSetMsg() {
    return this.msg != null;
  }

  public void setMsgIsSet(boolean value) {
    if (!value) {
      this.msg = null;
    }
  }

  public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
    switch (field) {
    case TASK_PATH:
      if (value == null) {
        unsetTaskPath();
      } else {
        setTaskPath((java.lang.String)value);
      }
      break;

    case STATUS:
      if (value == null) {
        unsetStatus();
      } else {
        setStatus((TaskStatus)value);
      }
      break;

    case POLICY:
      if (value == null) {
        unsetPolicy();
      } else {
        setPolicy((SchedulingPolicy)value);
      }
      break;

    case MSG:
      if (value == null) {
        unsetMsg();
      } else {
        setMsg((java.lang.String)value);
      }
      break;

    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case TASK_PATH:
      return getTaskPath();

    case STATUS:
      return getStatus();

    case POLICY:
      return getPolicy();

    case MSG:
      return getMsg();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case TASK_PATH:
      return isSetTaskPath();
    case STATUS:
      return isSetStatus();
    case POLICY:
      return isSetPolicy();
    case MSG:
      return isSetMsg();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that == null)
      return false;
    if (that instanceof TaskReceipt)
      return this.equals((TaskReceipt)that);
    return false;
  }

  public boolean equals(TaskReceipt that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_taskPath = true && this.isSetTaskPath();
    boolean that_present_taskPath = true && that.isSetTaskPath();
    if (this_present_taskPath || that_present_taskPath) {
      if (!(this_present_taskPath && that_present_taskPath))
        return false;
      if (!this.taskPath.equals(that.taskPath))
        return false;
    }

    boolean this_present_status = true && this.isSetStatus();
    boolean that_present_status = true && that.isSetStatus();
    if (this_present_status || that_present_status) {
      if (!(this_present_status && that_present_status))
        return false;
      if (!this.status.equals(that.status))
        return false;
    }

    boolean this_present_policy = true && this.isSetPolicy();
    boolean that_present_policy = true && that.isSetPolicy();
    if (this_present_policy || that_present_policy) {
      if (!(this_present_policy && that_present_policy))
        return false;
      if (!this.policy.equals(that.policy))
        return false;
    }

    boolean this_present_msg = true && this.isSetMsg();
    boolean that_present_msg = true && that.isSetMsg();
    if (this_present_msg || that_present_msg) {
      if (!(this_present_msg && that_present_msg))
        return false;
      if (!this.msg.equals(that.msg))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetTaskPath()) ? 131071 : 524287);
    if (isSetTaskPath())
      hashCode = hashCode * 8191 + taskPath.hashCode();

    hashCode = hashCode * 8191 + ((isSetStatus()) ? 131071 : 524287);
    if (isSetStatus())
      hashCode = hashCode * 8191 + status.getValue();

    hashCode = hashCode * 8191 + ((isSetPolicy()) ? 131071 : 524287);
    if (isSetPolicy())
      hashCode = hashCode * 8191 + policy.getValue();

    hashCode = hashCode * 8191 + ((isSetMsg()) ? 131071 : 524287);
    if (isSetMsg())
      hashCode = hashCode * 8191 + msg.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(TaskReceipt other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.valueOf(isSetTaskPath()).compareTo(other.isSetTaskPath());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTaskPath()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.taskPath, other.taskPath);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetStatus()).compareTo(other.isSetStatus());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStatus()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.status, other.status);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetPolicy()).compareTo(other.isSetPolicy());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPolicy()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.policy, other.policy);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetMsg()).compareTo(other.isSetMsg());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMsg()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.msg, other.msg);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  @org.apache.thrift.annotation.Nullable
  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("TaskReceipt(");
    boolean first = true;

    sb.append("taskPath:");
    if (this.taskPath == null) {
      sb.append("null");
    } else {
      sb.append(this.taskPath);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("status:");
    if (this.status == null) {
      sb.append("null");
    } else {
      sb.append(this.status);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("policy:");
    if (this.policy == null) {
      sb.append("null");
    } else {
      sb.append(this.policy);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("msg:");
    if (this.msg == null) {
      sb.append("null");
    } else {
      sb.append(this.msg);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TaskReceiptStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public TaskReceiptStandardScheme getScheme() {
      return new TaskReceiptStandardScheme();
    }
  }

  private static class TaskReceiptStandardScheme extends org.apache.thrift.scheme.StandardScheme<TaskReceipt> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, TaskReceipt struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // TASK_PATH
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.taskPath = iprot.readString();
              struct.setTaskPathIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // STATUS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.status = pa1.TaskStatus.findByValue(iprot.readI32());
              struct.setStatusIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // POLICY
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.policy = pa1.SchedulingPolicy.findByValue(iprot.readI32());
              struct.setPolicyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // MSG
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.msg = iprot.readString();
              struct.setMsgIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, TaskReceipt struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.taskPath != null) {
        oprot.writeFieldBegin(TASK_PATH_FIELD_DESC);
        oprot.writeString(struct.taskPath);
        oprot.writeFieldEnd();
      }
      if (struct.status != null) {
        oprot.writeFieldBegin(STATUS_FIELD_DESC);
        oprot.writeI32(struct.status.getValue());
        oprot.writeFieldEnd();
      }
      if (struct.policy != null) {
        oprot.writeFieldBegin(POLICY_FIELD_DESC);
        oprot.writeI32(struct.policy.getValue());
        oprot.writeFieldEnd();
      }
      if (struct.msg != null) {
        oprot.writeFieldBegin(MSG_FIELD_DESC);
        oprot.writeString(struct.msg);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TaskReceiptTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public TaskReceiptTupleScheme getScheme() {
      return new TaskReceiptTupleScheme();
    }
  }

  private static class TaskReceiptTupleScheme extends org.apache.thrift.scheme.TupleScheme<TaskReceipt> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TaskReceipt struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetTaskPath()) {
        optionals.set(0);
      }
      if (struct.isSetStatus()) {
        optionals.set(1);
      }
      if (struct.isSetPolicy()) {
        optionals.set(2);
      }
      if (struct.isSetMsg()) {
        optionals.set(3);
      }
      oprot.writeBitSet(optionals, 4);
      if (struct.isSetTaskPath()) {
        oprot.writeString(struct.taskPath);
      }
      if (struct.isSetStatus()) {
        oprot.writeI32(struct.status.getValue());
      }
      if (struct.isSetPolicy()) {
        oprot.writeI32(struct.policy.getValue());
      }
      if (struct.isSetMsg()) {
        oprot.writeString(struct.msg);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TaskReceipt struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(4);
      if (incoming.get(0)) {
        struct.taskPath = iprot.readString();
        struct.setTaskPathIsSet(true);
      }
      if (incoming.get(1)) {
        struct.status = pa1.TaskStatus.findByValue(iprot.readI32());
        struct.setStatusIsSet(true);
      }
      if (incoming.get(2)) {
        struct.policy = pa1.SchedulingPolicy.findByValue(iprot.readI32());
        struct.setPolicyIsSet(true);
      }
      if (incoming.get(3)) {
        struct.msg = iprot.readString();
        struct.setMsgIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

